name: Deploy API to AWS ECS

on:
  push:
    branches:
      - main  # Deploy when pushing to the main branch

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate Required Secrets
        run: |
          REQUIRED_SECRETS=(
            "CLIENT_ID" "CLIENT_SECRET" "JWT_SECRET_KEY" "JWT_ALGORITHM" "ACCESS_TOKEN_EXPIRE_MINUTES"
            "DB_NAME" "DB_HOST" "DB_PORT" "DB_USER" "DB_PASSWORD"
          )
          for SECRET in "${REQUIRED_SECRETS[@]}"; do
            if [[ -z "${!SECRET}" ]]; then
              echo "ERROR: Secret $SECRET is not set. Deployment failed!"
              exit 1
            fi
          done
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Register New Task Definition with ENV Variables
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
          TASK_FAMILY: ${{ secrets.TASK_FAMILY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
        run: |
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY --query "taskDefinition" --output json)

          echo "$TASK_DEF" | jq '
            .containerDefinitions[0].environment += [
              {"name": "DB_NAME", "value": "'$DB_NAME'"},
              {"name": "DB_HOST", "value": "'$DB_HOST'"},
              {"name": "DB_PORT", "value": "'$DB_PORT'"},
              {"name": "DB_USER", "value": "'$DB_USER'"},
              {"name": "DB_PASSWORD", "value": "'$DB_PASSWORD'"},
              {"name": "CLIENT_ID", "value": "'$CLIENT_ID'"},
              {"name": "CLIENT_SECRET", "value": "'$CLIENT_SECRET'"},
              {"name": "JWT_SECRET_KEY", "value": "'$JWT_SECRET_KEY'"},
              {"name": "JWT_ALGORITHM", "value": "'$JWT_ALGORITHM'"},
              {"name": "ACCESS_TOKEN_EXPIRE_MINUTES", "value": "'$ACCESS_TOKEN_EXPIRE_MINUTES'"}
            ] | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .taskDefinitionArn)' > new-task-def.json

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query "taskDefinition.taskDefinitionArn" --output text)

          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN --force-new-deployment
