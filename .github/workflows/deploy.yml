name: Deploy API to AWS ECS

on:
  push:
    branches:
      - main  # Deploy when pushing to the main branch

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: 644732129545.dkr.ecr.us-east-2.amazonaws.com
          ECR_REPOSITORY: razorit/api
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Register New Task Definition with ENV Variables
        env:
          AWS_REGION: us-east-2
          CLUSTER_NAME: razorit-cluster
          SERVICE_NAME: razorit-api-service
          TASK_FAMILY: razorit-api-task
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY --query "taskDefinition" --output json)

          echo "$TASK_DEF" | jq '
            .containerDefinitions[0].environment += [
              {"name": "DB_NAME", "value": "'$DB_NAME'"},
              {"name": "DB_HOST", "value": "'$DB_HOST'"},
              {"name": "DB_PORT", "value": "'$DB_PORT'"},
              {"name": "DB_USER", "value": "'$DB_USER'"},
              {"name": "DB_PASSWORD", "value": "'$DB_PASSWORD'"}
            ] | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .taskDefinitionArn)' > new-task-def.json

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query "taskDefinition.taskDefinitionArn" --output text)

          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN --force-new-deployment
